/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CondoUnitService } from "../condoUnit.service";
import { Public } from "../../decorators/public.decorator";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CondoUnitCreateInput } from "./CondoUnitCreateInput";
import { CondoUnit } from "./CondoUnit";
import { CondoUnitFindManyArgs } from "./CondoUnitFindManyArgs";
import { CondoUnitWhereUniqueInput } from "./CondoUnitWhereUniqueInput";
import { CondoUnitUpdateInput } from "./CondoUnitUpdateInput";
import { FileFindManyArgs } from "../../file/base/FileFindManyArgs";
import { File } from "../../file/base/File";
import { FileWhereUniqueInput } from "../../file/base/FileWhereUniqueInput";
import { ParkingSpotFindManyArgs } from "../../parkingSpot/base/ParkingSpotFindManyArgs";
import { ParkingSpot } from "../../parkingSpot/base/ParkingSpot";
import { ParkingSpotWhereUniqueInput } from "../../parkingSpot/base/ParkingSpotWhereUniqueInput";
import { UserCondoFindManyArgs } from "../../userCondo/base/UserCondoFindManyArgs";
import { UserCondo } from "../../userCondo/base/UserCondo";
import { UserCondoWhereUniqueInput } from "../../userCondo/base/UserCondoWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CondoUnitControllerBase {
  constructor(
    protected readonly service: CondoUnitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @Public()
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CondoUnit })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCondoUnit(
    @common.Body() data: CondoUnitCreateInput
  ): Promise<CondoUnit> {
    return await this.service.createCondoUnit({
      data: {
        ...data,

        lockerID: data.lockerID
          ? {
              connect: data.lockerID,
            }
          : undefined,

        propertyID: data.propertyID
          ? {
              connect: data.propertyID,
            }
          : undefined,

        registrationKeys: data.registrationKeys
          ? {
              connect: data.registrationKeys,
            }
          : undefined,
      },
      select: {
        condoFee: true,
        createdAt: true,
        id: true,

        lockerID: {
          select: {
            id: true,
          },
        },

        propertyID: {
          select: {
            id: true,
          },
        },

        registrationKeys: {
          select: {
            id: true,
          },
        },

        size: true,
        updatedAt: true,
      },
    });
  }

  @Public()
  @common.Get()
  @swagger.ApiOkResponse({ type: [CondoUnit] })
  @ApiNestedQuery(CondoUnitFindManyArgs)
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async condoUnits(@common.Req() request: Request): Promise<CondoUnit[]> {
    const args = plainToClass(CondoUnitFindManyArgs, request.query);
    return this.service.condoUnits({
      ...args,
      select: {
        condoFee: true,
        createdAt: true,
        id: true,

        lockerID: {
          select: {
            id: true,
          },
        },

        propertyID: {
          select: {
            id: true,
          },
        },

        registrationKeys: {
          select: {
            id: true,
          },
        },

        size: true,
        updatedAt: true,
      },
    });
  }

  @Public()
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CondoUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async condoUnit(
    @common.Param() params: CondoUnitWhereUniqueInput
  ): Promise<CondoUnit | null> {
    const result = await this.service.condoUnit({
      where: params,
      select: {
        condoFee: true,
        createdAt: true,
        id: true,

        lockerID: {
          select: {
            id: true,
          },
        },

        propertyID: {
          select: {
            id: true,
          },
        },

        registrationKeys: {
          select: {
            id: true,
          },
        },

        size: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @Public()
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CondoUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCondoUnit(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() data: CondoUnitUpdateInput
  ): Promise<CondoUnit | null> {
    try {
      return await this.service.updateCondoUnit({
        where: params,
        data: {
          ...data,

          lockerID: data.lockerID
            ? {
                connect: data.lockerID,
              }
            : undefined,

          propertyID: data.propertyID
            ? {
                connect: data.propertyID,
              }
            : undefined,

          registrationKeys: data.registrationKeys
            ? {
                connect: data.registrationKeys,
              }
            : undefined,
        },
        select: {
          condoFee: true,
          createdAt: true,
          id: true,

          lockerID: {
            select: {
              id: true,
            },
          },

          propertyID: {
            select: {
              id: true,
            },
          },

          registrationKeys: {
            select: {
              id: true,
            },
          },

          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CondoUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCondoUnit(
    @common.Param() params: CondoUnitWhereUniqueInput
  ): Promise<CondoUnit | null> {
    try {
      return await this.service.deleteCondoUnit({
        where: params,
        select: {
          condoFee: true,
          createdAt: true,
          id: true,

          lockerID: {
            select: {
              id: true,
            },
          },

          propertyID: {
            select: {
              id: true,
            },
          },

          registrationKeys: {
            select: {
              id: true,
            },
          },

          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/files")
  @ApiNestedQuery(FileFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "File",
    action: "read",
    possession: "any",
  })
  async findFiles(
    @common.Req() request: Request,
    @common.Param() params: CondoUnitWhereUniqueInput
  ): Promise<File[]> {
    const query = plainToClass(FileFindManyArgs, request.query);
    const results = await this.service.findFiles(params.id, {
      ...query,
      select: {
        bucket: true,

        companyID: {
          select: {
            id: true,
          },
        },

        condoUnitID: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        propertyId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        userId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @Public()
  @common.Post("/:id/files")
  async connectFiles(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        connect: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Patch("/:id/files")
  async updateFiles(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        set: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Delete("/:id/files")
  async disconnectFiles(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        disconnect: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/parkingSpotID")
  @ApiNestedQuery(ParkingSpotFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ParkingSpot",
    action: "read",
    possession: "any",
  })
  async findParkingSpotId(
    @common.Req() request: Request,
    @common.Param() params: CondoUnitWhereUniqueInput
  ): Promise<ParkingSpot[]> {
    const query = plainToClass(ParkingSpotFindManyArgs, request.query);
    const results = await this.service.findParkingSpotId(params.id, {
      ...query,
      select: {
        condoUnit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        propertyId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @Public()
  @common.Post("/:id/parkingSpotID")
  async connectParkingSpotId(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: ParkingSpotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parkingSpotID: {
        connect: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Patch("/:id/parkingSpotID")
  async updateParkingSpotId(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: ParkingSpotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parkingSpotID: {
        set: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Delete("/:id/parkingSpotID")
  async disconnectParkingSpotId(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: ParkingSpotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parkingSpotID: {
        disconnect: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userCondos")
  @ApiNestedQuery(UserCondoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserCondo",
    action: "read",
    possession: "any",
  })
  async findUserCondos(
    @common.Req() request: Request,
    @common.Param() params: CondoUnitWhereUniqueInput
  ): Promise<UserCondo[]> {
    const query = plainToClass(UserCondoFindManyArgs, request.query);
    const results = await this.service.findUserCondos(params.id, {
      ...query,
      select: {
        condoID: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,

        userID: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @Public()
  @common.Post("/:id/userCondos")
  async connectUserCondos(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: UserCondoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userCondos: {
        connect: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Patch("/:id/userCondos")
  async updateUserCondos(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: UserCondoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userCondos: {
        set: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Delete("/:id/userCondos")
  async disconnectUserCondos(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: UserCondoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userCondos: {
        disconnect: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }
}

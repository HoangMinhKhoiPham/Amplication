/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CondoUnitService } from "../condoUnit.service";
import { Public } from "../../decorators/public.decorator";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CondoUnitCreateInput } from "./CondoUnitCreateInput";
import { CondoUnit } from "./CondoUnit";
import { CondoUnitFindManyArgs } from "./CondoUnitFindManyArgs";
import { CondoUnitWhereUniqueInput } from "./CondoUnitWhereUniqueInput";
import { CondoUnitUpdateInput } from "./CondoUnitUpdateInput";
import { ParkingSpotFindManyArgs } from "../../parkingSpot/base/ParkingSpotFindManyArgs";
import { ParkingSpot } from "../../parkingSpot/base/ParkingSpot";
import { ParkingSpotWhereUniqueInput } from "../../parkingSpot/base/ParkingSpotWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CondoUnitControllerBase {
  constructor(
    protected readonly service: CondoUnitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @Public()
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CondoUnit })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCondoUnit(
    @common.Body() data: CondoUnitCreateInput
  ): Promise<CondoUnit> {
    return await this.service.createCondoUnit({
      data: {
        ...data,

        lockerId: data.lockerId
          ? {
              connect: data.lockerId,
            }
          : undefined,

        propertyId: data.propertyId
          ? {
              connect: data.propertyId,
            }
          : undefined,
      },
      select: {
        condoFee: true,
        createdAt: true,
        id: true,

        lockerId: {
          select: {
            id: true,
          },
        },

        propertyId: {
          select: {
            id: true,
          },
        },

        size: true,
        updatedAt: true,
      },
    });
  }

  @Public()
  @common.Get()
  @swagger.ApiOkResponse({ type: [CondoUnit] })
  @ApiNestedQuery(CondoUnitFindManyArgs)
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async condoUnits(@common.Req() request: Request): Promise<CondoUnit[]> {
    const args = plainToClass(CondoUnitFindManyArgs, request.query);
    return this.service.condoUnits({
      ...args,
      select: {
        condoFee: true,
        createdAt: true,
        id: true,

        lockerId: {
          select: {
            id: true,
          },
        },

        propertyId: {
          select: {
            id: true,
          },
        },

        size: true,
        updatedAt: true,
      },
    });
  }

  @Public()
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CondoUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async condoUnit(
    @common.Param() params: CondoUnitWhereUniqueInput
  ): Promise<CondoUnit | null> {
    const result = await this.service.condoUnit({
      where: params,
      select: {
        condoFee: true,
        createdAt: true,
        id: true,

        lockerId: {
          select: {
            id: true,
          },
        },

        propertyId: {
          select: {
            id: true,
          },
        },

        size: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @Public()
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CondoUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCondoUnit(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() data: CondoUnitUpdateInput
  ): Promise<CondoUnit | null> {
    try {
      return await this.service.updateCondoUnit({
        where: params,
        data: {
          ...data,

          lockerId: data.lockerId
            ? {
                connect: data.lockerId,
              }
            : undefined,

          propertyId: data.propertyId
            ? {
                connect: data.propertyId,
              }
            : undefined,
        },
        select: {
          condoFee: true,
          createdAt: true,
          id: true,

          lockerId: {
            select: {
              id: true,
            },
          },

          propertyId: {
            select: {
              id: true,
            },
          },

          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CondoUnit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCondoUnit(
    @common.Param() params: CondoUnitWhereUniqueInput
  ): Promise<CondoUnit | null> {
    try {
      return await this.service.deleteCondoUnit({
        where: params,
        select: {
          condoFee: true,
          createdAt: true,
          id: true,

          lockerId: {
            select: {
              id: true,
            },
          },

          propertyId: {
            select: {
              id: true,
            },
          },

          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/parkingSpotId")
  @ApiNestedQuery(ParkingSpotFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ParkingSpot",
    action: "read",
    possession: "any",
  })
  async findParkingSpotId(
    @common.Req() request: Request,
    @common.Param() params: CondoUnitWhereUniqueInput
  ): Promise<ParkingSpot[]> {
    const query = plainToClass(ParkingSpotFindManyArgs, request.query);
    const results = await this.service.findParkingSpotId(params.id, {
      ...query,
      select: {
        condoUnit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        propertyId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @Public()
  @common.Post("/:id/parkingSpotId")
  async connectParkingSpotId(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: ParkingSpotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parkingSpotId: {
        connect: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Patch("/:id/parkingSpotId")
  async updateParkingSpotId(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: ParkingSpotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parkingSpotId: {
        set: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Delete("/:id/parkingSpotId")
  async disconnectParkingSpotId(
    @common.Param() params: CondoUnitWhereUniqueInput,
    @common.Body() body: ParkingSpotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parkingSpotId: {
        disconnect: body,
      },
    };
    await this.service.updateCondoUnit({
      where: params,
      data,
      select: { id: true },
    });
  }
}

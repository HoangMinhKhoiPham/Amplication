/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CondoUnit as PrismaCondoUnit,
  File as PrismaFile,
  ParkingSpot as PrismaParkingSpot,
  Request as PrismaRequest,
  UserCondo as PrismaUserCondo,
  Locker as PrismaLocker,
  Property as PrismaProperty,
  RegistrationKey as PrismaRegistrationKey,
} from "@prisma/client";

export class CondoUnitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CondoUnitCountArgs, "select">
  ): Promise<number> {
    return this.prisma.condoUnit.count(args);
  }

  async condoUnits<T extends Prisma.CondoUnitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitFindManyArgs>
  ): Promise<PrismaCondoUnit[]> {
    return this.prisma.condoUnit.findMany<Prisma.CondoUnitFindManyArgs>(args);
  }
  async condoUnit<T extends Prisma.CondoUnitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitFindUniqueArgs>
  ): Promise<PrismaCondoUnit | null> {
    return this.prisma.condoUnit.findUnique(args);
  }
  async createCondoUnit<T extends Prisma.CondoUnitCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitCreateArgs>
  ): Promise<PrismaCondoUnit> {
    return this.prisma.condoUnit.create<T>(args);
  }
  async updateCondoUnit<T extends Prisma.CondoUnitUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitUpdateArgs>
  ): Promise<PrismaCondoUnit> {
    return this.prisma.condoUnit.update<T>(args);
  }
  async deleteCondoUnit<T extends Prisma.CondoUnitDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitDeleteArgs>
  ): Promise<PrismaCondoUnit> {
    return this.prisma.condoUnit.delete(args);
  }

  async findFile(
    parentId: number,
    args: Prisma.FileFindManyArgs
  ): Promise<PrismaFile[]> {
    return this.prisma.condoUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .file(args);
  }

  async findParkingSpot(
    parentId: number,
    args: Prisma.ParkingSpotFindManyArgs
  ): Promise<PrismaParkingSpot[]> {
    return this.prisma.condoUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .parkingSpot(args);
  }

  async findRequests(
    parentId: number,
    args: Prisma.RequestFindManyArgs
  ): Promise<PrismaRequest[]> {
    return this.prisma.condoUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requests(args);
  }

  async findUserCondos(
    parentId: number,
    args: Prisma.UserCondoFindManyArgs
  ): Promise<PrismaUserCondo[]> {
    return this.prisma.condoUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userCondos(args);
  }

  async getLocker(parentId: number): Promise<PrismaLocker | null> {
    return this.prisma.condoUnit
      .findUnique({
        where: { id: parentId },
      })
      .locker();
  }

  async getPropertyId(parentId: number): Promise<PrismaProperty | null> {
    return this.prisma.condoUnit
      .findUnique({
        where: { id: parentId },
      })
      .propertyID();
  }

  async getRegistrationKeys(
    parentId: number
  ): Promise<PrismaRegistrationKey | null> {
    return this.prisma.condoUnit
      .findUnique({
        where: { id: parentId },
      })
      .registrationKeys();
  }
}

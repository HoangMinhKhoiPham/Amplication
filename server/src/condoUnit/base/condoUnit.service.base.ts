/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CondoUnit, // @ts-ignore
  File, // @ts-ignore
  ParkingSpot, // @ts-ignore
  UserCondo, // @ts-ignore
  Locker, // @ts-ignore
  Property, // @ts-ignore
  RegistrationKey,
} from "@prisma/client";

export class CondoUnitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CondoUnitCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitCountArgs>
  ): Promise<number> {
    return this.prisma.condoUnit.count(args);
  }

  async condoUnits<T extends Prisma.CondoUnitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitFindManyArgs>
  ): Promise<CondoUnit[]> {
    return this.prisma.condoUnit.findMany(args);
  }
  async condoUnit<T extends Prisma.CondoUnitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitFindUniqueArgs>
  ): Promise<CondoUnit | null> {
    return this.prisma.condoUnit.findUnique(args);
  }
  async createCondoUnit<T extends Prisma.CondoUnitCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitCreateArgs>
  ): Promise<CondoUnit> {
    return this.prisma.condoUnit.create<T>(args);
  }
  async updateCondoUnit<T extends Prisma.CondoUnitUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitUpdateArgs>
  ): Promise<CondoUnit> {
    return this.prisma.condoUnit.update<T>(args);
  }
  async deleteCondoUnit<T extends Prisma.CondoUnitDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CondoUnitDeleteArgs>
  ): Promise<CondoUnit> {
    return this.prisma.condoUnit.delete(args);
  }

  async findFiles(
    parentId: number,
    args: Prisma.FileFindManyArgs
  ): Promise<File[]> {
    return this.prisma.condoUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .files(args);
  }

  async findParkingSpotId(
    parentId: number,
    args: Prisma.ParkingSpotFindManyArgs
  ): Promise<ParkingSpot[]> {
    return this.prisma.condoUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .parkingSpotID(args);
  }

  async findUserCondos(
    parentId: number,
    args: Prisma.UserCondoFindManyArgs
  ): Promise<UserCondo[]> {
    return this.prisma.condoUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userCondos(args);
  }

  async getLockerId(parentId: number): Promise<Locker | null> {
    return this.prisma.condoUnit
      .findUnique({
        where: { id: parentId },
      })
      .lockerID();
  }

  async getPropertyId(parentId: number): Promise<Property | null> {
    return this.prisma.condoUnit
      .findUnique({
        where: { id: parentId },
      })
      .propertyID();
  }

  async getRegistrationKeys(parentId: number): Promise<RegistrationKey | null> {
    return this.prisma.condoUnit
      .findUnique({
        where: { id: parentId },
      })
      .registrationKeys();
  }
}

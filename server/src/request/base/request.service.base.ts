/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Request as PrismaRequest,
  Notification as PrismaNotification,
  Company as PrismaCompany,
  CondoUnit as PrismaCondoUnit,
  CompanyEmployee as PrismaCompanyEmployee,
  Property as PrismaProperty,
  User as PrismaUser,
} from "@prisma/client";

export class RequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RequestCountArgs, "select">): Promise<number> {
    return this.prisma.request.count(args);
  }

  async requests<T extends Prisma.RequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestFindManyArgs>
  ): Promise<PrismaRequest[]> {
    return this.prisma.request.findMany<Prisma.RequestFindManyArgs>(args);
  }
  async request<T extends Prisma.RequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestFindUniqueArgs>
  ): Promise<PrismaRequest | null> {
    return this.prisma.request.findUnique(args);
  }
  async createRequest<T extends Prisma.RequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestCreateArgs>
  ): Promise<PrismaRequest> {
    return this.prisma.request.create<T>(args);
  }
  async updateRequest<T extends Prisma.RequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestUpdateArgs>
  ): Promise<PrismaRequest> {
    return this.prisma.request.update<T>(args);
  }
  async deleteRequest<T extends Prisma.RequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RequestDeleteArgs>
  ): Promise<PrismaRequest> {
    return this.prisma.request.delete(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.request
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.request
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }

  async getCondoUnit(parentId: string): Promise<PrismaCondoUnit | null> {
    return this.prisma.request
      .findUnique({
        where: { id: parentId },
      })
      .condoUnit();
  }

  async getEmployee(parentId: string): Promise<PrismaCompanyEmployee | null> {
    return this.prisma.request
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }

  async getProperty(parentId: string): Promise<PrismaProperty | null> {
    return this.prisma.request
      .findUnique({
        where: { id: parentId },
      })
      .property();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.request
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}

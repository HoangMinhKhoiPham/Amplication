/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CompanyEmployee as PrismaCompanyEmployee,
  Request as PrismaRequest,
  Company as PrismaCompany,
  User as PrismaUser,
} from "@prisma/client";

export class CompanyEmployeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CompanyEmployeeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.companyEmployee.count(args);
  }

  async companyEmployees<T extends Prisma.CompanyEmployeeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyEmployeeFindManyArgs>
  ): Promise<PrismaCompanyEmployee[]> {
    return this.prisma.companyEmployee.findMany<Prisma.CompanyEmployeeFindManyArgs>(
      args
    );
  }
  async companyEmployee<T extends Prisma.CompanyEmployeeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyEmployeeFindUniqueArgs>
  ): Promise<PrismaCompanyEmployee | null> {
    return this.prisma.companyEmployee.findUnique(args);
  }
  async createCompanyEmployee<T extends Prisma.CompanyEmployeeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyEmployeeCreateArgs>
  ): Promise<PrismaCompanyEmployee> {
    return this.prisma.companyEmployee.create<T>(args);
  }
  async updateCompanyEmployee<T extends Prisma.CompanyEmployeeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyEmployeeUpdateArgs>
  ): Promise<PrismaCompanyEmployee> {
    return this.prisma.companyEmployee.update<T>(args);
  }
  async deleteCompanyEmployee<T extends Prisma.CompanyEmployeeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyEmployeeDeleteArgs>
  ): Promise<PrismaCompanyEmployee> {
    return this.prisma.companyEmployee.delete(args);
  }

  async findRequests(
    parentId: number,
    args: Prisma.RequestFindManyArgs
  ): Promise<PrismaRequest[]> {
    return this.prisma.companyEmployee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requests(args);
  }

  async getCompany(parentId: number): Promise<PrismaCompany | null> {
    return this.prisma.companyEmployee
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }

  async getUser(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.companyEmployee
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}

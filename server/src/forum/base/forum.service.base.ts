/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Forum as PrismaForum,
  Post as PrismaPost,
  Company as PrismaCompany,
} from "@prisma/client";

export class ForumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ForumCountArgs, "select">): Promise<number> {
    return this.prisma.forum.count(args);
  }

  async forums<T extends Prisma.ForumFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ForumFindManyArgs>
  ): Promise<PrismaForum[]> {
    return this.prisma.forum.findMany<Prisma.ForumFindManyArgs>(args);
  }
  async forum<T extends Prisma.ForumFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ForumFindUniqueArgs>
  ): Promise<PrismaForum | null> {
    return this.prisma.forum.findUnique(args);
  }
  async createForum<T extends Prisma.ForumCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ForumCreateArgs>
  ): Promise<PrismaForum> {
    return this.prisma.forum.create<T>(args);
  }
  async updateForum<T extends Prisma.ForumUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ForumUpdateArgs>
  ): Promise<PrismaForum> {
    return this.prisma.forum.update<T>(args);
  }
  async deleteForum<T extends Prisma.ForumDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ForumDeleteArgs>
  ): Promise<PrismaForum> {
    return this.prisma.forum.delete(args);
  }

  async findPosts(
    parentId: string,
    args: Prisma.PostFindManyArgs
  ): Promise<PrismaPost[]> {
    return this.prisma.forum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .posts(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.forum
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }
}

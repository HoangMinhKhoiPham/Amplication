/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { LockerService } from "../locker.service";
import { LockerCreateInput } from "./LockerCreateInput";
import { LockerWhereInput } from "./LockerWhereInput";
import { LockerWhereUniqueInput } from "./LockerWhereUniqueInput";
import { LockerFindManyArgs } from "./LockerFindManyArgs";
import { LockerUpdateInput } from "./LockerUpdateInput";
import { Locker } from "./Locker";
import { Post } from "../../post/base/Post";
import { Request } from "../../request/base/Request";

export class LockerGrpcControllerBase {
  constructor(protected readonly service: LockerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Locker })
  @GrpcMethod("LockerService", "createLocker")
  async createLocker(@common.Body() data: LockerCreateInput): Promise<Locker> {
    return await this.service.createLocker({
      data: {
        ...data,

        condoUnits: data.condoUnits
          ? {
              connect: data.condoUnits,
            }
          : undefined,

        property: data.property
          ? {
              connect: data.property,
            }
          : undefined,
      },
      select: {
        condoUnits: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Locker] })
  @ApiNestedQuery(LockerFindManyArgs)
  @GrpcMethod("LockerService", "lockers")
  async lockers(@common.Req() request: Request): Promise<Locker[]> {
    const args = plainToClass(LockerFindManyArgs, request.query);
    return this.service.lockers({
      ...args,
      select: {
        condoUnits: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Locker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LockerService", "locker")
  async locker(
    @common.Param() params: LockerWhereUniqueInput
  ): Promise<Locker | null> {
    const result = await this.service.locker({
      where: params,
      select: {
        condoUnits: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Locker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LockerService", "updateLocker")
  async updateLocker(
    @common.Param() params: LockerWhereUniqueInput,
    @common.Body() data: LockerUpdateInput
  ): Promise<Locker | null> {
    try {
      return await this.service.updateLocker({
        where: params,
        data: {
          ...data,

          condoUnits: data.condoUnits
            ? {
                connect: data.condoUnits,
              }
            : undefined,

          property: data.property
            ? {
                connect: data.property,
              }
            : undefined,
        },
        select: {
          condoUnits: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Locker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LockerService", "deleteLocker")
  async deleteLocker(
    @common.Param() params: LockerWhereUniqueInput
  ): Promise<Locker | null> {
    try {
      return await this.service.deleteLocker({
        where: params,
        select: {
          condoUnits: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

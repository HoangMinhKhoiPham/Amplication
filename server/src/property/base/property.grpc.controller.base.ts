/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PropertyService } from "../property.service";
import { PropertyCreateInput } from "./PropertyCreateInput";
import { PropertyWhereInput } from "./PropertyWhereInput";
import { PropertyWhereUniqueInput } from "./PropertyWhereUniqueInput";
import { PropertyFindManyArgs } from "./PropertyFindManyArgs";
import { PropertyUpdateInput } from "./PropertyUpdateInput";
import { Property } from "./Property";
import { Post } from "../../post/base/Post";
import { Request } from "../../request/base/Request";
import { CommonFacilityFindManyArgs } from "../../commonFacility/base/CommonFacilityFindManyArgs";
import { CommonFacility } from "../../commonFacility/base/CommonFacility";
import { CommonFacilityWhereUniqueInput } from "../../commonFacility/base/CommonFacilityWhereUniqueInput";
import { CondoUnitFindManyArgs } from "../../condoUnit/base/CondoUnitFindManyArgs";
import { CondoUnit } from "../../condoUnit/base/CondoUnit";
import { CondoUnitWhereUniqueInput } from "../../condoUnit/base/CondoUnitWhereUniqueInput";
import { FileFindManyArgs } from "../../file/base/FileFindManyArgs";
import { File } from "../../file/base/File";
import { FileWhereUniqueInput } from "../../file/base/FileWhereUniqueInput";
import { LockerFindManyArgs } from "../../locker/base/LockerFindManyArgs";
import { Locker } from "../../locker/base/Locker";
import { LockerWhereUniqueInput } from "../../locker/base/LockerWhereUniqueInput";
import { ParkingSpotFindManyArgs } from "../../parkingSpot/base/ParkingSpotFindManyArgs";
import { ParkingSpot } from "../../parkingSpot/base/ParkingSpot";
import { ParkingSpotWhereUniqueInput } from "../../parkingSpot/base/ParkingSpotWhereUniqueInput";
import { RequestFindManyArgs } from "../../request/base/RequestFindManyArgs";
import { RequestWhereUniqueInput } from "../../request/base/RequestWhereUniqueInput";

export class PropertyGrpcControllerBase {
  constructor(protected readonly service: PropertyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Property })
  @GrpcMethod("PropertyService", "createProperty")
  async createProperty(
    @common.Body() data: PropertyCreateInput
  ): Promise<Property> {
    return await this.service.createProperty({
      data: {
        ...data,

        company: data.company
          ? {
              connect: data.company,
            }
          : undefined,
      },
      select: {
        address: true,

        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        lockerCount: true,
        name: true,
        parkingCount: true,
        unitCount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Property] })
  @ApiNestedQuery(PropertyFindManyArgs)
  @GrpcMethod("PropertyService", "properties")
  async properties(@common.Req() request: Request): Promise<Property[]> {
    const args = plainToClass(PropertyFindManyArgs, request.query);
    return this.service.properties({
      ...args,
      select: {
        address: true,

        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        lockerCount: true,
        name: true,
        parkingCount: true,
        unitCount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Property })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PropertyService", "property")
  async property(
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<Property | null> {
    const result = await this.service.property({
      where: params,
      select: {
        address: true,

        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        lockerCount: true,
        name: true,
        parkingCount: true,
        unitCount: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Property })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PropertyService", "updateProperty")
  async updateProperty(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() data: PropertyUpdateInput
  ): Promise<Property | null> {
    try {
      return await this.service.updateProperty({
        where: params,
        data: {
          ...data,

          company: data.company
            ? {
                connect: data.company,
              }
            : undefined,
        },
        select: {
          address: true,

          company: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          lockerCount: true,
          name: true,
          parkingCount: true,
          unitCount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Property })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PropertyService", "deleteProperty")
  async deleteProperty(
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<Property | null> {
    try {
      return await this.service.deleteProperty({
        where: params,
        select: {
          address: true,

          company: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          lockerCount: true,
          name: true,
          parkingCount: true,
          unitCount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/commonFacilities")
  @ApiNestedQuery(CommonFacilityFindManyArgs)
  @GrpcMethod("PropertyService", "findManyCommonFacilities")
  async findManyCommonFacilities(
    @common.Req() request: Request,
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<CommonFacility[]> {
    const query = plainToClass(CommonFacilityFindManyArgs, request.query);
    const results = await this.service.findCommonFacilities(params.id, {
      ...query,
      select: {
        createdAt: true,
        facilityType: true,
        id: true,

        property: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/commonFacilities")
  @GrpcMethod("PropertyService", "connectCommonFacilities")
  async connectCommonFacilities(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: CommonFacilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commonFacilities: {
        connect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/commonFacilities")
  @GrpcMethod("PropertyService", "updateCommonFacilities")
  async updateCommonFacilities(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: CommonFacilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commonFacilities: {
        set: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/commonFacilities")
  @GrpcMethod("PropertyService", "disconnectCommonFacilities")
  async disconnectCommonFacilities(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: CommonFacilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commonFacilities: {
        disconnect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/condoUnits")
  @ApiNestedQuery(CondoUnitFindManyArgs)
  @GrpcMethod("PropertyService", "findManyCondoUnits")
  async findManyCondoUnits(
    @common.Req() request: Request,
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<CondoUnit[]> {
    const query = plainToClass(CondoUnitFindManyArgs, request.query);
    const results = await this.service.findCondoUnits(params.id, {
      ...query,
      select: {
        condoFee: true,
        createdAt: true,
        id: true,

        locker: {
          select: {
            id: true,
          },
        },

        propertyID: {
          select: {
            id: true,
          },
        },

        registrationKeys: {
          select: {
            id: true,
          },
        },

        size: true,
        test: true,
        unitNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/condoUnits")
  @GrpcMethod("PropertyService", "connectCondoUnits")
  async connectCondoUnits(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: CondoUnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      condoUnits: {
        connect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/condoUnits")
  @GrpcMethod("PropertyService", "updateCondoUnits")
  async updateCondoUnits(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: CondoUnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      condoUnits: {
        set: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/condoUnits")
  @GrpcMethod("PropertyService", "disconnectCondoUnits")
  async disconnectCondoUnits(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: CondoUnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      condoUnits: {
        disconnect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/files")
  @ApiNestedQuery(FileFindManyArgs)
  @GrpcMethod("PropertyService", "findManyFiles")
  async findManyFiles(
    @common.Req() request: Request,
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<File[]> {
    const query = plainToClass(FileFindManyArgs, request.query);
    const results = await this.service.findFiles(params.id, {
      ...query,
      select: {
        bucket: true,

        company: {
          select: {
            id: true,
          },
        },

        condoUnit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/files")
  @GrpcMethod("PropertyService", "connectFiles")
  async connectFiles(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        connect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/files")
  @GrpcMethod("PropertyService", "updateFiles")
  async updateFiles(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        set: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/files")
  @GrpcMethod("PropertyService", "disconnectFiles")
  async disconnectFiles(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        disconnect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/Lockers")
  @ApiNestedQuery(LockerFindManyArgs)
  @GrpcMethod("PropertyService", "findManyLockers")
  async findManyLockers(
    @common.Req() request: Request,
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<Locker[]> {
    const query = plainToClass(LockerFindManyArgs, request.query);
    const results = await this.service.findLockers(params.id, {
      ...query,
      select: {
        condoUnits: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/Lockers")
  @GrpcMethod("PropertyService", "connectLockers")
  async connectLockers(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: LockerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      Lockers: {
        connect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/Lockers")
  @GrpcMethod("PropertyService", "updateLockers")
  async updateLockers(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: LockerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      Lockers: {
        set: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/Lockers")
  @GrpcMethod("PropertyService", "disconnectLockers")
  async disconnectLockers(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: LockerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      Lockers: {
        disconnect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ParkingSpots")
  @ApiNestedQuery(ParkingSpotFindManyArgs)
  @GrpcMethod("PropertyService", "findManyParkingSpots")
  async findManyParkingSpots(
    @common.Req() request: Request,
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<ParkingSpot[]> {
    const query = plainToClass(ParkingSpotFindManyArgs, request.query);
    const results = await this.service.findParkingSpots(params.id, {
      ...query,
      select: {
        condoUnit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ParkingSpots")
  @GrpcMethod("PropertyService", "connectParkingSpots")
  async connectParkingSpots(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: ParkingSpotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ParkingSpots: {
        connect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ParkingSpots")
  @GrpcMethod("PropertyService", "updateParkingSpots")
  async updateParkingSpots(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: ParkingSpotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ParkingSpots: {
        set: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ParkingSpots")
  @GrpcMethod("PropertyService", "disconnectParkingSpots")
  async disconnectParkingSpots(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: ParkingSpotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ParkingSpots: {
        disconnect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requests")
  @ApiNestedQuery(RequestFindManyArgs)
  @GrpcMethod("PropertyService", "findManyRequests")
  async findManyRequests(
    @common.Req() request: Request,
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<Request[]> {
    const query = plainToClass(RequestFindManyArgs, request.query);
    const results = await this.service.findRequests(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        condoUnit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        elevator: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        key: true,

        property: {
          select: {
            id: true,
          },
        },

        question: true,
        reportMessage: true,
        requestType: true,
        response: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requests")
  @GrpcMethod("PropertyService", "connectRequests")
  async connectRequests(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        connect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requests")
  @GrpcMethod("PropertyService", "updateRequests")
  async updateRequests(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        set: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requests")
  @GrpcMethod("PropertyService", "disconnectRequests")
  async disconnectRequests(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        disconnect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }
}

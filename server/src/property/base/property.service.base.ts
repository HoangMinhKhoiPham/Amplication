/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Property, // @ts-ignore
  File, // @ts-ignore
  CondoUnit, // @ts-ignore
  Locker, // @ts-ignore
  ParkingSpot,
} from "@prisma/client";

export class PropertyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PropertyCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyCountArgs>
  ): Promise<number> {
    return this.prisma.property.count(args);
  }

  async properties<T extends Prisma.PropertyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyFindManyArgs>
  ): Promise<Property[]> {
    return this.prisma.property.findMany(args);
  }
  async property<T extends Prisma.PropertyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyFindUniqueArgs>
  ): Promise<Property | null> {
    return this.prisma.property.findUnique(args);
  }
  async createProperty<T extends Prisma.PropertyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyCreateArgs>
  ): Promise<Property> {
    return this.prisma.property.create<T>(args);
  }
  async updateProperty<T extends Prisma.PropertyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyUpdateArgs>
  ): Promise<Property> {
    return this.prisma.property.update<T>(args);
  }
  async deleteProperty<T extends Prisma.PropertyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyDeleteArgs>
  ): Promise<Property> {
    return this.prisma.property.delete(args);
  }

  async findFiles(
    parentId: number,
    args: Prisma.FileFindManyArgs
  ): Promise<File[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .files(args);
  }

  async getCondoUnits(parentId: number): Promise<CondoUnit | null> {
    return this.prisma.property
      .findUnique({
        where: { id: parentId },
      })
      .condoUnits();
  }

  async getLockers(parentId: number): Promise<Locker | null> {
    return this.prisma.property
      .findUnique({
        where: { id: parentId },
      })
      .Lockers();
  }

  async getParkingSpots(parentId: number): Promise<ParkingSpot | null> {
    return this.prisma.property
      .findUnique({
        where: { id: parentId },
      })
      .ParkingSpots();
  }
}

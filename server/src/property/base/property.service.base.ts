/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Property as PrismaProperty,
  CommonFacility as PrismaCommonFacility,
  CondoUnit as PrismaCondoUnit,
  File as PrismaFile,
  Locker as PrismaLocker,
  ParkingSpot as PrismaParkingSpot,
  Request as PrismaRequest,
  Company as PrismaCompany,
} from "@prisma/client";

export class PropertyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PropertyCountArgs, "select">): Promise<number> {
    return this.prisma.property.count(args);
  }

  async properties<T extends Prisma.PropertyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyFindManyArgs>
  ): Promise<PrismaProperty[]> {
    return this.prisma.property.findMany<Prisma.PropertyFindManyArgs>(args);
  }
  async property<T extends Prisma.PropertyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyFindUniqueArgs>
  ): Promise<PrismaProperty | null> {
    return this.prisma.property.findUnique(args);
  }
  async createProperty<T extends Prisma.PropertyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyCreateArgs>
  ): Promise<PrismaProperty> {
    return this.prisma.property.create<T>(args);
  }
  async updateProperty<T extends Prisma.PropertyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyUpdateArgs>
  ): Promise<PrismaProperty> {
    return this.prisma.property.update<T>(args);
  }
  async deleteProperty<T extends Prisma.PropertyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PropertyDeleteArgs>
  ): Promise<PrismaProperty> {
    return this.prisma.property.delete(args);
  }

  async findCommonFacilities(
    parentId: number,
    args: Prisma.CommonFacilityFindManyArgs
  ): Promise<PrismaCommonFacility[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .commonFacilities(args);
  }

  async findCondoUnits(
    parentId: number,
    args: Prisma.CondoUnitFindManyArgs
  ): Promise<PrismaCondoUnit[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .condoUnits(args);
  }

  async findFiles(
    parentId: number,
    args: Prisma.FileFindManyArgs
  ): Promise<PrismaFile[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .files(args);
  }

  async findLockers(
    parentId: number,
    args: Prisma.LockerFindManyArgs
  ): Promise<PrismaLocker[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .Lockers(args);
  }

  async findParkingSpots(
    parentId: number,
    args: Prisma.ParkingSpotFindManyArgs
  ): Promise<PrismaParkingSpot[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ParkingSpots(args);
  }

  async findRequests(
    parentId: number,
    args: Prisma.RequestFindManyArgs
  ): Promise<PrismaRequest[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requests(args);
  }

  async getCompany(parentId: number): Promise<PrismaCompany | null> {
    return this.prisma.property
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }
}

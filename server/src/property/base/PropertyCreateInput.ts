/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, ValidateNested, IsOptional, IsInt } from "class-validator";
import { CondoUnitCreateNestedManyWithoutPropertiesInput } from "./CondoUnitCreateNestedManyWithoutPropertiesInput";
import { Type } from "class-transformer";
import { FileCreateNestedManyWithoutPropertiesInput } from "./FileCreateNestedManyWithoutPropertiesInput";
import { LockerCreateNestedManyWithoutPropertiesInput } from "./LockerCreateNestedManyWithoutPropertiesInput";
import { ParkingSpotCreateNestedManyWithoutPropertiesInput } from "./ParkingSpotCreateNestedManyWithoutPropertiesInput";

@InputType()
class PropertyCreateInput {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  address!: string;

  @ApiProperty({
    required: false,
    type: () => CondoUnitCreateNestedManyWithoutPropertiesInput,
  })
  @ValidateNested()
  @Type(() => CondoUnitCreateNestedManyWithoutPropertiesInput)
  @IsOptional()
  @Field(() => CondoUnitCreateNestedManyWithoutPropertiesInput, {
    nullable: true,
  })
  condoUnits?: CondoUnitCreateNestedManyWithoutPropertiesInput;

  @ApiProperty({
    required: false,
    type: () => FileCreateNestedManyWithoutPropertiesInput,
  })
  @ValidateNested()
  @Type(() => FileCreateNestedManyWithoutPropertiesInput)
  @IsOptional()
  @Field(() => FileCreateNestedManyWithoutPropertiesInput, {
    nullable: true,
  })
  files?: FileCreateNestedManyWithoutPropertiesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  lockerCount?: number | null;

  @ApiProperty({
    required: false,
    type: () => LockerCreateNestedManyWithoutPropertiesInput,
  })
  @ValidateNested()
  @Type(() => LockerCreateNestedManyWithoutPropertiesInput)
  @IsOptional()
  @Field(() => LockerCreateNestedManyWithoutPropertiesInput, {
    nullable: true,
  })
  Lockers?: LockerCreateNestedManyWithoutPropertiesInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  parkingCount!: number;

  @ApiProperty({
    required: false,
    type: () => ParkingSpotCreateNestedManyWithoutPropertiesInput,
  })
  @ValidateNested()
  @Type(() => ParkingSpotCreateNestedManyWithoutPropertiesInput)
  @IsOptional()
  @Field(() => ParkingSpotCreateNestedManyWithoutPropertiesInput, {
    nullable: true,
  })
  ParkingSpots?: ParkingSpotCreateNestedManyWithoutPropertiesInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  unitCount!: number;
}

export { PropertyCreateInput as PropertyCreateInput };

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CommonFacility, // @ts-ignore
  Reservation,
} from "@prisma/client";

export class CommonFacilityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CommonFacilityCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommonFacilityCountArgs>
  ): Promise<number> {
    return this.prisma.commonFacility.count(args);
  }

  async commonFacilities<T extends Prisma.CommonFacilityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommonFacilityFindManyArgs>
  ): Promise<CommonFacility[]> {
    return this.prisma.commonFacility.findMany(args);
  }
  async commonFacility<T extends Prisma.CommonFacilityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommonFacilityFindUniqueArgs>
  ): Promise<CommonFacility | null> {
    return this.prisma.commonFacility.findUnique(args);
  }
  async createCommonFacility<T extends Prisma.CommonFacilityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommonFacilityCreateArgs>
  ): Promise<CommonFacility> {
    return this.prisma.commonFacility.create<T>(args);
  }
  async updateCommonFacility<T extends Prisma.CommonFacilityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommonFacilityUpdateArgs>
  ): Promise<CommonFacility> {
    return this.prisma.commonFacility.update<T>(args);
  }
  async deleteCommonFacility<T extends Prisma.CommonFacilityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommonFacilityDeleteArgs>
  ): Promise<CommonFacility> {
    return this.prisma.commonFacility.delete(args);
  }

  async findAvailabilities(
    parentId: string,
    args: Prisma.ReservationFindManyArgs
  ): Promise<Reservation[]> {
    return this.prisma.commonFacility
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .availabilities(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CommonFacilityService } from "../commonFacility.service";
import { Request } from "../../request/base/Request";
import { CommonFacilityCreateInput } from "./CommonFacilityCreateInput";
import { CommonFacilityWhereInput } from "./CommonFacilityWhereInput";
import { CommonFacilityWhereUniqueInput } from "./CommonFacilityWhereUniqueInput";
import { CommonFacilityFindManyArgs } from "./CommonFacilityFindManyArgs";
import { CommonFacilityUpdateInput } from "./CommonFacilityUpdateInput";
import { CommonFacility } from "./CommonFacility";
import { Post } from "../../post/base/Post";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { ReservationWhereUniqueInput } from "../../reservation/base/ReservationWhereUniqueInput";

export class CommonFacilityGrpcControllerBase {
  constructor(protected readonly service: CommonFacilityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommonFacility })
  @GrpcMethod("CommonFacilityService", "createCommonFacility")
  async createCommonFacility(
    @common.Body() data: CommonFacilityCreateInput
  ): Promise<CommonFacility> {
    return await this.service.createCommonFacility({
      data: data,
      select: {
        createdAt: true,
        facilityType: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommonFacility] })
  @ApiNestedQuery(CommonFacilityFindManyArgs)
  @GrpcMethod("CommonFacilityService", "commonFacilities")
  async commonFacilities(
    @common.Req() request: Request
  ): Promise<CommonFacility[]> {
    const args = plainToClass(CommonFacilityFindManyArgs, request.query);
    return this.service.commonFacilities({
      ...args,
      select: {
        createdAt: true,
        facilityType: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommonFacility })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CommonFacilityService", "commonFacility")
  async commonFacility(
    @common.Param() params: CommonFacilityWhereUniqueInput
  ): Promise<CommonFacility | null> {
    const result = await this.service.commonFacility({
      where: params,
      select: {
        createdAt: true,
        facilityType: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommonFacility })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CommonFacilityService", "updateCommonFacility")
  async updateCommonFacility(
    @common.Param() params: CommonFacilityWhereUniqueInput,
    @common.Body() data: CommonFacilityUpdateInput
  ): Promise<CommonFacility | null> {
    try {
      return await this.service.updateCommonFacility({
        where: params,
        data: data,
        select: {
          createdAt: true,
          facilityType: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommonFacility })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CommonFacilityService", "deleteCommonFacility")
  async deleteCommonFacility(
    @common.Param() params: CommonFacilityWhereUniqueInput
  ): Promise<CommonFacility | null> {
    try {
      return await this.service.deleteCommonFacility({
        where: params,
        select: {
          createdAt: true,
          facilityType: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/availabilities")
  @ApiNestedQuery(ReservationFindManyArgs)
  @GrpcMethod("CommonFacilityService", "findManyAvailabilities")
  async findManyAvailabilities(
    @common.Req() request: Request,
    @common.Param() params: CommonFacilityWhereUniqueInput
  ): Promise<Reservation[]> {
    const query = plainToClass(ReservationFindManyArgs, request.query);
    const results = await this.service.findAvailabilities(params.id, {
      ...query,
      select: {
        availablity: true,

        commonFacilityID: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        notes: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/availabilities")
  @GrpcMethod("CommonFacilityService", "connectAvailabilities")
  async connectAvailabilities(
    @common.Param() params: CommonFacilityWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilities: {
        connect: body,
      },
    };
    await this.service.updateCommonFacility({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/availabilities")
  @GrpcMethod("CommonFacilityService", "updateAvailabilities")
  async updateAvailabilities(
    @common.Param() params: CommonFacilityWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilities: {
        set: body,
      },
    };
    await this.service.updateCommonFacility({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/availabilities")
  @GrpcMethod("CommonFacilityService", "disconnectAvailabilities")
  async disconnectAvailabilities(
    @common.Param() params: CommonFacilityWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilities: {
        disconnect: body,
      },
    };
    await this.service.updateCommonFacility({
      where: params,
      data,
      select: { id: true },
    });
  }
}

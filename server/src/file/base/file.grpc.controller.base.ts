/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { FileService } from "../file.service";
import { Request } from "../../request/base/Request";
import { FileCreateInput } from "./FileCreateInput";
import { FileWhereInput } from "./FileWhereInput";
import { FileWhereUniqueInput } from "./FileWhereUniqueInput";
import { FileFindManyArgs } from "./FileFindManyArgs";
import { FileUpdateInput } from "./FileUpdateInput";
import { File } from "./File";
import { Post } from "../../post/base/Post";

export class FileGrpcControllerBase {
  constructor(protected readonly service: FileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: File })
  @GrpcMethod("FileService", "createFile")
  async createFile(@common.Body() data: FileCreateInput): Promise<File> {
    return await this.service.createFile({
      data: {
        ...data,

        company: data.company
          ? {
              connect: data.company,
            }
          : undefined,

        condoUnit: data.condoUnit
          ? {
              connect: data.condoUnit,
            }
          : undefined,

        property: data.property
          ? {
              connect: data.property,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        bucket: true,

        company: {
          select: {
            id: true,
          },
        },

        condoUnit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [File] })
  @ApiNestedQuery(FileFindManyArgs)
  @GrpcMethod("FileService", "files")
  async files(@common.Req() request: Request): Promise<File[]> {
    const args = plainToClass(FileFindManyArgs, request.query);
    return this.service.files({
      ...args,
      select: {
        bucket: true,

        company: {
          select: {
            id: true,
          },
        },

        condoUnit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: File })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("FileService", "file")
  async file(
    @common.Param() params: FileWhereUniqueInput
  ): Promise<File | null> {
    const result = await this.service.file({
      where: params,
      select: {
        bucket: true,

        company: {
          select: {
            id: true,
          },
        },

        condoUnit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: File })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("FileService", "updateFile")
  async updateFile(
    @common.Param() params: FileWhereUniqueInput,
    @common.Body() data: FileUpdateInput
  ): Promise<File | null> {
    try {
      return await this.service.updateFile({
        where: params,
        data: {
          ...data,

          company: data.company
            ? {
                connect: data.company,
              }
            : undefined,

          condoUnit: data.condoUnit
            ? {
                connect: data.condoUnit,
              }
            : undefined,

          property: data.property
            ? {
                connect: data.property,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          bucket: true,

          company: {
            select: {
              id: true,
            },
          },

          condoUnit: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: File })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("FileService", "deleteFile")
  async deleteFile(
    @common.Param() params: FileWhereUniqueInput
  ): Promise<File | null> {
    try {
      return await this.service.deleteFile({
        where: params,
        select: {
          bucket: true,

          company: {
            select: {
              id: true,
            },
          },

          condoUnit: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

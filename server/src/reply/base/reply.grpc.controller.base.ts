/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ReplyService } from "../reply.service";
import { ReplyCreateInput } from "./ReplyCreateInput";
import { ReplyWhereInput } from "./ReplyWhereInput";
import { ReplyWhereUniqueInput } from "./ReplyWhereUniqueInput";
import { ReplyFindManyArgs } from "./ReplyFindManyArgs";
import { ReplyUpdateInput } from "./ReplyUpdateInput";
import { Reply } from "./Reply";
import { Post } from "../../post/base/Post";
import { Request } from "../../request/base/Request";

export class ReplyGrpcControllerBase {
  constructor(protected readonly service: ReplyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Reply })
  @GrpcMethod("ReplyService", "createReply")
  async createReply(@common.Body() data: ReplyCreateInput): Promise<Reply> {
    return await this.service.createReply({
      data: {
        ...data,

        posts: data.posts
          ? {
              connect: data.posts,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,
        id: true,

        posts: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Reply] })
  @ApiNestedQuery(ReplyFindManyArgs)
  @GrpcMethod("ReplyService", "replies")
  async replies(@common.Req() request: Request): Promise<Reply[]> {
    const args = plainToClass(ReplyFindManyArgs, request.query);
    return this.service.replies({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,

        posts: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Reply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ReplyService", "reply")
  async reply(
    @common.Param() params: ReplyWhereUniqueInput
  ): Promise<Reply | null> {
    const result = await this.service.reply({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,

        posts: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Reply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ReplyService", "updateReply")
  async updateReply(
    @common.Param() params: ReplyWhereUniqueInput,
    @common.Body() data: ReplyUpdateInput
  ): Promise<Reply | null> {
    try {
      return await this.service.updateReply({
        where: params,
        data: {
          ...data,

          posts: data.posts
            ? {
                connect: data.posts,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,
          id: true,

          posts: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Reply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ReplyService", "deleteReply")
  async deleteReply(
    @common.Param() params: ReplyWhereUniqueInput
  ): Promise<Reply | null> {
    try {
      return await this.service.deleteReply({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,

          posts: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

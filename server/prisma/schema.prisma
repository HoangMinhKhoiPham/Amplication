datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  companyEmployees CompanyEmployee[]
  createdAt        DateTime          @default(now())
  email            String            @unique
  files            File[]
  firstName        String?
  id               Int               @id @default(autoincrement())
  lastName         String?
  password         String
  phoneNumber      String            @unique
  posts            Post[]
  requests         Request[]
  reservations     Reservation[]
  roles            Json
  updatedAt        DateTime          @updatedAt
  userCondos       UserCondo[]
  username         String            @unique
}

model CondoUnit {
  condoFee         Decimal?
  createdAt        DateTime         @default(now())
  file             File[]
  id               Int              @id @default(autoincrement())
  locker           Locker?          @relation(fields: [lockerID], references: [id])
  lockerID         Int?             @unique
  parkingSpot      ParkingSpot[]
  propertyID       Property?        @relation(fields: [propertyIDId], references: [id])
  propertyIDId     Int?
  registrationKeys RegistrationKey?
  requests         Request[]
  size             String
  test             String?
  unitNumber       String?
  updatedAt        DateTime         @updatedAt
  userCondos       UserCondo[]
}

model Property {
  address      String
  company      Company?      @relation(fields: [companyID], references: [id])
  companyID    Int?
  condoUnits   CondoUnit[]
  createdAt    DateTime      @default(now())
  files        File[]
  id           Int           @id @default(autoincrement())
  lockerCount  Int?
  Lockers      Locker[]
  name         String
  parkingCount Int
  ParkingSpots ParkingSpot[]
  requests     Request[]
  unitCount    Int
  updatedAt    DateTime      @updatedAt
}

model ParkingSpot {
  condoUnit   CondoUnit? @relation(fields: [condoUnitId], references: [id])
  condoUnitId Int?
  createdAt   DateTime   @default(now())
  id          Int        @id @default(autoincrement())
  property    Property?  @relation(fields: [propertyID], references: [id])
  propertyID  Int?
  updatedAt   DateTime   @updatedAt
}

model Locker {
  condoUnits CondoUnit?
  createdAt  DateTime   @default(now())
  id         Int        @id @default(autoincrement())
  property   Property?  @relation(fields: [propertyID], references: [id])
  propertyID Int?
  updatedAt  DateTime   @updatedAt
}

model Company {
  companyEmployees CompanyEmployee[]
  createdAt        DateTime          @default(now())
  file             File[]
  id               Int               @id @default(autoincrement())
  name             String
  properties       Property[]
  requests         Request[]
  updatedAt        DateTime?         @updatedAt
}

model File {
  bucket      String
  company     Company?   @relation(fields: [companyID], references: [id])
  companyID   Int?
  condoUnit   CondoUnit? @relation(fields: [condoUnitID], references: [id])
  condoUnitID Int?
  createdAt   DateTime   @default(now())
  id          Int        @id @default(autoincrement())
  name        String
  property    Property?  @relation(fields: [propertyID], references: [id])
  propertyID  Int?
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userID], references: [id])
  userID      Int?
}

model RegistrationKey {
  condoUnit   CondoUnit @relation(fields: [condoUnitID], references: [id])
  condoUnitID Int       @unique
  createdAt   DateTime  @default(now())
  id          Int       @id @default(autoincrement())
  role        Json
  updatedAt   DateTime  @updatedAt
  value       String
}

model Role {
  id   String  @id @default(cuid())
  name String?
}

model CompanyEmployee {
  company   Company?  @relation(fields: [companyID], references: [id])
  companyID Int?
  id        Int       @id @default(autoincrement())
  requests  Request[]
  user      User?     @relation(fields: [userID], references: [id])
  userID    Int?
}

model UserCondo {
  condo     CondoUnit? @relation(fields: [condoID], references: [id])
  condoID   Int?
  createdAt DateTime   @default(now())
  id        Int        @id @default(autoincrement())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userID], references: [id])
  userID    Int?
}

model Forum {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  posts     Post[]
  updatedAt DateTime @updatedAt
}

model Post {
  createdAt DateTime @default(now())
  forum     Forum?   @relation(fields: [forumID], references: [id])
  forumID   String?
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userID], references: [id])
  userID    Int?
}

model CommonFacility {
  availabilities Reservation[]
  createdAt      DateTime                        @default(now())
  facilityType   EnumCommonFacilityFacilityType?
  id             String                          @id @default(cuid())
  updatedAt      DateTime                        @updatedAt
}

model Reservation {
  availablity        String?
  commonFacilityID   CommonFacility? @relation(fields: [commonFacilityIDId], references: [id])
  commonFacilityIDId String?
  createdAt          DateTime        @default(now())
  id                 String          @id @default(cuid())
  notes              String?
  updatedAt          DateTime        @updatedAt
  user               User?           @relation(fields: [userID], references: [id])
  userID             Int?
}

model Request {
  comment     String?
  company     Company?                @relation(fields: [companyID], references: [id])
  companyID   Int?
  condoUnit   CondoUnit?              @relation(fields: [condoUnitID], references: [id])
  condoUnitID Int?
  createdAt   DateTime                @default(now())
  elevator    String?
  employee    CompanyEmployee?        @relation(fields: [employeeID], references: [id])
  employeeID  Int?
  id          String                  @id @default(cuid())
  key         String?
  property    Property?               @relation(fields: [propertyID], references: [id])
  propertyID  Int?
  question    String?
  requestType EnumRequestRequestType?
  response    String?
  status      EnumRequestStatus?
  updatedAt   DateTime                @updatedAt
  user        User?                   @relation(fields: [userID], references: [id])
  userID      Int?
}

model Notification {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  message   String?
  title     String?
  updatedAt DateTime @updatedAt
}

enum EnumCommonFacilityFacilityType {
  sky_lounge
  spa_fitness
  sauna
}

enum EnumRequestRequestType {
  moving_in
  moving_out
  intercom_change
  access_request
  violation_report
  deficiency_report
  question
}

enum EnumRequestStatus {
  New
  In_Progress
  Pending_Approval
  Approved
  Disapproved
  Complete
}

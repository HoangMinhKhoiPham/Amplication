datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  companyEmployees CompanyEmployee[]
  createdAt        DateTime          @default(now())
  email            String            @unique
  files            File[]
  firstName        String?
  id               Int               @id @default(autoincrement())
  lastName         String?
  password         String
  phoneNumber      String            @unique
  roles            Json
  updatedAt        DateTime          @updatedAt
  userCondos       UserCondo[]
  username         String            @unique
}

model Customer {
  createdAt DateTime @default(now())
  email     String?
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  phone     String?
  updatedAt DateTime @updatedAt
}

model CondoUnit {
  condoFee         String?
  createdAt        DateTime         @default(now())
  files            File[]
  id               Int              @id @default(autoincrement())
  lockerID         Locker?          @relation(fields: [lockerIDId], references: [id])
  lockerIDId       String?          @unique
  parkingSpotID    ParkingSpot[]
  propertyID       Property?        @relation(fields: [propertyIDId], references: [id])
  propertyIDId     Int?
  registrationKeys RegistrationKey?
  size             String
  updatedAt        DateTime         @updatedAt
  userCondos       UserCondo[]
}

model Property {
  address      String
  condoUnits   CondoUnit[]
  createdAt    DateTime      @default(now())
  files        File[]
  id           Int           @id @default(autoincrement())
  lockerCount  Int?
  Lockers      Locker[]
  name         String
  parkingCount Int
  ParkingSpots ParkingSpot[]
  unitCount    Int
  updatedAt    DateTime      @updatedAt
}

model ParkingSpot {
  condoUnit   CondoUnit? @relation(fields: [condoUnitId], references: [id])
  condoUnitId Int?
  createdAt   DateTime   @default(now())
  id          Int        @id @default(autoincrement())
  propertyId  Property?  @relation(fields: [propertyId], references: [id])
  propertyId  Int?
  updatedAt   DateTime   @updatedAt
}

model Locker {
  condoUnits   CondoUnit?
  createdAt    DateTime   @default(now())
  id           String     @id @default(cuid())
  propertyId   Property?  @relation(fields: [propertyIdId], references: [id])
  propertyIdId Int?
  updatedAt    DateTime   @updatedAt
}

model Company {
  companyEmployees CompanyEmployee[]
  createdAt        DateTime          @default(now())
  files            File[]
  id               Int               @id @default(autoincrement())
  name             String
  updatedAt        DateTime?         @updatedAt
}

model File {
  bucket      String
  companyID   Company?   @relation(fields: [companyIDId], references: [id])
  companyIDId Int?
  condoUnitID CondoUnit? @relation(fields: [condoUnitID], references: [id])
  condoUnitID Int?
  createdAt   DateTime   @default(now())
  id          String     @id @default(cuid())
  name        String
  propertyId  Property?  @relation(fields: [propertyID], references: [id])
  propertyID  Int?
  updatedAt   DateTime   @updatedAt
  userId      User?      @relation(fields: [userIdId], references: [id])
  userIdId    Int?
}

model RegistrationKey {
  condoUnitId CondoUnit @relation(fields: [condoUnitId], references: [id])
  condoUnitId Int       @unique
  createdAt   DateTime  @default(now())
  id          String    @id @default(cuid())
  updatedAt   DateTime  @updatedAt
  value       String
}

model Role {
  id   String  @id @default(cuid())
  name String?
}

model CompanyEmployee {
  companyId   Company? @relation(fields: [companyIdId], references: [id])
  companyIdId Int?
  id          String   @id @default(cuid())
  userId      User?    @relation(fields: [userIdId], references: [id])
  userIdId    Int?
}

model UserCondo {
  condoID   CondoUnit? @relation(fields: [condoID], references: [id])
  condoID   Int?
  createdAt DateTime   @default(now())
  id        Int        @id @default(autoincrement())
  updatedAt DateTime   @updatedAt
  userID    User?      @relation(fields: [userID], references: [id])
  userID    Int?
}
